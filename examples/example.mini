[32]
Allocates thirty two registers in a table

Defines a function at location zero on the function table
:(0)
    Adds two to the current register
    ++
    Moves one register to the right
    >
    Subtracts one from the the register if its val is zero
    ?(0)-
    <
    ; Moves back to original register and ends if
    ; End method

:(1)
    Notice that any character outside of the instruction set characters is ignored
    Prints a character based on the ascii value of the current register
    &
    _
    Prints the number the register holds
    .
    _
    ; Ends method
Adds two to register zero
++
Calls function zero
^(0)
Now register zero should be four, register one should be negative one
^(1)
>
We cannot print negative one, it has no ascii value associated, so we will first increment it to one
++
^(1)

For fun we multiply it by sixteen
****
This will print sixteen and its ascii char
^(1)

Program terminates here
Use the show registers command flag to show the table of all registers